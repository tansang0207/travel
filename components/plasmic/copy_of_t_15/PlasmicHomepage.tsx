// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: XiJnC74LVBXwv2GD5rQsh
// Component: bj0R0Ki4-zoK

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import NavBar from "../../NavBar"; // plasmic-import: tZeYajO3iWH3/component
import YouTube from "@plasmicpkgs/react-youtube";
import Button from "../../Button"; // plasmic-import: bZiONNXVM_of/component
import TextInput from "../../TextInput"; // plasmic-import: MhEIguoAPHdt/component

import { useScreenVariants as useScreenVariantsajgIsfmDzCp3 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: ajgIsfmDZCp3/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../t_15_imported_dep_4/plasmic.module.css"; // plasmic-import: LmQdyERnKGVSTHLkNgDKC/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: XiJnC74LVBXwv2GD5rQsh/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: bj0R0Ki4-zoK/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: d2y9-OzVhadq/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: Bj9fcl4yGvNB/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  headerMainSection?: Flex__<"div">;
  container?: Flex__<"div">;
  navBar?: Flex__<typeof NavBar>;
  h1?: Flex__<"h1">;
  section1?: Flex__<"div">;
  youTube?: Flex__<typeof YouTube>;
  rowContainer8?: Flex__<"div">;
  brownColorBg?: Flex__<"div">;
  section12?: Flex__<"div">;
  rowContainer3?: Flex__<"div">;
  section13?: Flex__<"div">;
  rowContainer9?: Flex__<"div">;
  section14?: Flex__<"div">;
  rowContainer10?: Flex__<"div">;
  textInput?: Flex__<typeof TextInput>;
  blockquote?: Flex__<"blockquote">;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "clickedReserve",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsajgIsfmDzCp3()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <Stack__
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"headerMainSection"}
            data-plasmic-override={overrides.headerMainSection}
            className={classNames(projectcss.all, sty.headerMainSection)}
          >
            <div
              data-plasmic-name={"container"}
              data-plasmic-override={overrides.container}
              className={classNames(projectcss.all, sty.container)}
            >
              <NavBar
                data-plasmic-name={"navBar"}
                data-plasmic-override={overrides.navBar}
                className={classNames("__wab_instance", sty.navBar)}
              />

              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__wek4E)}
              >
                <div className={classNames(projectcss.all, sty.columns__rzQnU)}>
                  <div
                    className={classNames(projectcss.all, sty.column___4GpAz)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__jFuaA)}
                    >
                      <h1
                        data-plasmic-name={"h1"}
                        data-plasmic-override={overrides.h1}
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1
                        )}
                      >
                        {"Discover the world and plan the perfect trip."}
                      </h1>
                    </Stack__>
                  </div>
                </div>
              </Stack__>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__ecNeT)}>
            <div
              data-plasmic-name={"section1"}
              data-plasmic-override={overrides.section1}
              className={classNames(projectcss.all, sty.section1)}
              id={"about"}
            >
              <div className={classNames(projectcss.all, sty.columns__jhTsE)}>
                <div className={classNames(projectcss.all, sty.column__vqJdk)}>
                  <YouTube
                    data-plasmic-name={"youTube"}
                    data-plasmic-override={overrides.youTube}
                    className={classNames("__wab_instance", sty.youTube)}
                    modestbranding={true}
                    playsinline={false}
                    videoId={"rMy33bi4hpo"}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column__cADcU)}>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"rowContainer8"}
                    data-plasmic-override={overrides.rowContainer8}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.rowContainer8)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__rPc1J
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "About our hotel"
                        : "About our resort"}
                    </h2>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dGIsH
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                        : "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."}
                    </div>
                  </Stack__>
                </div>
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"brownColorBg"}
            data-plasmic-override={overrides.brownColorBg}
            className={classNames(projectcss.all, sty.brownColorBg)}
          >
            <div
              data-plasmic-name={"section12"}
              data-plasmic-override={overrides.section12}
              className={classNames(projectcss.all, sty.section12)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__dKvXw)}>
                <div
                  data-plasmic-name={"rowContainer3"}
                  data-plasmic-override={overrides.rowContainer3}
                  className={classNames(projectcss.all, sty.rowContainer3)}
                >
                  <div
                    className={classNames(projectcss.all, sty.columns___8Lzp)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__mjgP2)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__ltQdS)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "230px"
                            : "415px"
                        }
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"100%"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/copy_of_t_15/images/stephanieHarveyOtUahHcqs0YUnsplash1Jpg.jpg",
                          fullWidth: 640,
                          fullHeight: 853,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__jdhN7)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hZi0B
                        )}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2__iAxw
                          )}
                        >
                          {"Perfect trip"}
                        </h2>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hjBmc
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ."
                            : "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ."}
                        </div>
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__aKbmz
                          )}
                          color={"softBlue"}
                          submitsForm={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__rvxd1
                            )}
                          >
                            {"Our Room"}
                          </div>
                        </Button>
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__xdAx6
                          )}
                          color={"sand"}
                          link={"#"}
                          showStartIcon={undefined}
                          submitsForm={true}
                        >
                          {"Contact our Travel agent"}
                        </Button>
                      </Stack__>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"section13"}
              data-plasmic-override={overrides.section13}
              className={classNames(projectcss.all, sty.section13)}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__x5Xx)}
                id={"rooms"}
              >
                <div
                  data-plasmic-name={"rowContainer9"}
                  data-plasmic-override={overrides.rowContainer9}
                  className={classNames(projectcss.all, sty.rowContainer9)}
                >
                  <div
                    className={classNames(projectcss.all, sty.columns__xspbA)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__ejByh)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__qxrRz)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "230px"
                            : "415px"
                        }
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"100%"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/copy_of_t_15/images/spajpg.jpg",
                          fullWidth: 800,
                          fullHeight: 1200,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column___98QcE)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__amCig
                        )}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2___3Pq8E
                          )}
                        >
                          {"Best rooms"}
                        </h2>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___18Mq4
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ."
                            : "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ."}
                        </div>
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__yt8Ek
                          )}
                          color={"sand"}
                          link={"#"}
                          submitsForm={true}
                        >
                          {"View our rooms"}
                        </Button>
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__vHhkX
                          )}
                          color={"softBlue"}
                          submitsForm={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__eOpo5
                            )}
                          >
                            {"Our Room"}
                          </div>
                        </Button>
                      </Stack__>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"section14"}
              data-plasmic-override={overrides.section14}
              className={classNames(projectcss.all, sty.section14)}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__voOqO)}
                id={"restaurant"}
              >
                <div
                  data-plasmic-name={"rowContainer10"}
                  data-plasmic-override={overrides.rowContainer10}
                  className={classNames(projectcss.all, sty.rowContainer10)}
                >
                  <div
                    className={classNames(projectcss.all, sty.columns__qag71)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__b3YSt)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__wTs39)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "230px"
                            : "415px"
                        }
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"100%"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/copy_of_t_15/images/krystalNgDoppEkJjIbcUnsplashjpg.jpg",
                          fullWidth: 2730,
                          fullHeight: 4096,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__sx0Gt)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__w4HRl
                        )}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2___3O3Yc
                          )}
                        >
                          {"Food service"}
                        </h2>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__aGn2C
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ."
                            : "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ."}
                        </div>
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__geJFv
                          )}
                          color={"sand"}
                          link={"#"}
                          submitsForm={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__hG4K
                            )}
                          >
                            {"discover our restaurant"}
                          </div>
                        </Button>
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__n907C
                          )}
                          color={"softBlue"}
                          submitsForm={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wfebv
                            )}
                          >
                            {"Our Room"}
                          </div>
                        </Button>
                      </Stack__>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__uPwa)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__rrDxn)}
              id={"discover"}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns___3XrDs)}
              >
                <div className={classNames(projectcss.all, sty.column__bvMm6)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__sqrAp)}
                    displayHeight={"434px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "none"
                        : "100%"
                    }
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/copy_of_t_15/images/mjTangonanOe6QLhRHhhsUnsplashjpg.jpg",
                      fullWidth: 2734,
                      fullHeight: 4096,
                      aspectRatio: undefined
                    }}
                  />

                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__q6DiH
                    )}
                  >
                    {"Discover new adventures."}
                  </h2>
                </div>
                <div className={classNames(projectcss.all, sty.column___1Gi8M)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__tnMy)}
                    displayHeight={"434px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "none"
                        : "100%"
                    }
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/copy_of_t_15/images/coconut1Jpg.jpg",
                      fullWidth: 800,
                      fullHeight: 1200,
                      aspectRatio: undefined
                    }}
                  />

                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__puPdG
                    )}
                  >
                    {"Luxurious service."}
                  </h2>
                </div>
              </Stack__>
            </Stack__>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___8Nb38)}>
            <div className={classNames(projectcss.all, sty.columns___18XHy)}>
              <div className={classNames(projectcss.all, sty.column__kn1Dm)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__xv3Ga)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__ftdKj
                    )}
                  >
                    {"Stay posted on special offers and promos"}
                  </h2>
                  <TextInput
                    data-plasmic-name={"textInput"}
                    data-plasmic-override={overrides.textInput}
                    className={classNames("__wab_instance", sty.textInput)}
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, ["textInput", "value"])(
                        (e => e.target?.value).apply(null, eventArgs)
                      );
                    }}
                    placeholder={"Email Address"}
                    value={
                      generateStateValueProp($state, ["textInput", "value"]) ??
                      ""
                    }
                  />

                  <Button
                    className={classNames("__wab_instance", sty.button___4ICdD)}
                    color={"sand"}
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kx35W
                      )}
                    >
                      {"Submit"}
                    </div>
                  </Button>
                </Stack__>
              </div>
              <div className={classNames(projectcss.all, sty.column__fS8Iu)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__tyR)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__cocG6
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Contact us"
                      : "Contact us"}
                  </h2>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oHvnu
                    )}
                  >
                    {"2478 Lorem Ipsum \nLorem Ipsum , Lorem Ipsum "}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__drfvS
                    )}
                  >
                    {"P: 555.789.5643"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8GLh1
                    )}
                  >
                    {"E: xyz@yourcompany.com"}
                  </div>
                </Stack__>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__dVyni)}>
            <div className={classNames(projectcss.all, sty.freeBox__xs40U)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___61Tb7)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__qcPf)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__xtGHd)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__cuIho)}
                    >
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__p9OzK
                        )}
                        component={Link}
                        href={"#"}
                        platform={"nextjs"}
                      >
                        {"Contact"}
                      </PlasmicLink__>
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__wVzk
                        )}
                        component={Link}
                        href={"#"}
                        platform={"nextjs"}
                      >
                        {"FAQ"}
                      </PlasmicLink__>
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__iAyb9
                        )}
                        component={Link}
                        href={"#"}
                        platform={"nextjs"}
                      >
                        {"About us"}
                      </PlasmicLink__>
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__yhsoo
                        )}
                        component={Link}
                        href={"#"}
                        platform={"nextjs"}
                      >
                        {"Privacy policy"}
                      </PlasmicLink__>
                    </Stack__>
                    <blockquote
                      data-plasmic-name={"blockquote"}
                      data-plasmic-override={overrides.blockquote}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.blockquote
                      )}
                    >
                      {"\u00a9 Company. All rights reserved."}
                    </blockquote>
                  </Stack__>
                </Stack__>
              </Stack__>
            </div>
          </div>
        </Stack__>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerMainSection",
    "container",
    "navBar",
    "h1",
    "section1",
    "youTube",
    "rowContainer8",
    "brownColorBg",
    "section12",
    "rowContainer3",
    "section13",
    "rowContainer9",
    "section14",
    "rowContainer10",
    "textInput",
    "blockquote"
  ],
  headerMainSection: ["headerMainSection", "container", "navBar", "h1"],
  container: ["container", "navBar", "h1"],
  navBar: ["navBar"],
  h1: ["h1"],
  section1: ["section1", "youTube", "rowContainer8"],
  youTube: ["youTube"],
  rowContainer8: ["rowContainer8"],
  brownColorBg: [
    "brownColorBg",
    "section12",
    "rowContainer3",
    "section13",
    "rowContainer9",
    "section14",
    "rowContainer10"
  ],
  section12: ["section12", "rowContainer3"],
  rowContainer3: ["rowContainer3"],
  section13: ["section13", "rowContainer9"],
  rowContainer9: ["rowContainer9"],
  section14: ["section14", "rowContainer10"],
  rowContainer10: ["rowContainer10"],
  textInput: ["textInput"],
  blockquote: ["blockquote"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerMainSection: "div";
  container: "div";
  navBar: typeof NavBar;
  h1: "h1";
  section1: "div";
  youTube: typeof YouTube;
  rowContainer8: "div";
  brownColorBg: "div";
  section12: "div";
  rowContainer3: "div";
  section13: "div";
  rowContainer9: "div";
  section14: "div";
  rowContainer10: "div";
  textInput: typeof TextInput;
  blockquote: "blockquote";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerMainSection: makeNodeComponent("headerMainSection"),
    container: makeNodeComponent("container"),
    navBar: makeNodeComponent("navBar"),
    h1: makeNodeComponent("h1"),
    section1: makeNodeComponent("section1"),
    youTube: makeNodeComponent("youTube"),
    rowContainer8: makeNodeComponent("rowContainer8"),
    brownColorBg: makeNodeComponent("brownColorBg"),
    section12: makeNodeComponent("section12"),
    rowContainer3: makeNodeComponent("rowContainer3"),
    section13: makeNodeComponent("section13"),
    rowContainer9: makeNodeComponent("rowContainer9"),
    section14: makeNodeComponent("section14"),
    rowContainer10: makeNodeComponent("rowContainer10"),
    textInput: makeNodeComponent("textInput"),
    blockquote: makeNodeComponent("blockquote"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
